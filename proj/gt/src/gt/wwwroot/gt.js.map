{"version":3,"sources":["gt.ts"],"names":[],"mappings":"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","file":"gt.js","sourcesContent":["class Game {\r\n    private static PIXELS_PER_MOVE: number = 10;\r\n    private static MILLISEC_PER_MOVE: number = 50;\r\n    private static MILLISEC_GAME_TIMEOUT: number = 50;\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n    private _ctx: CanvasRenderingContext2D;\r\n    private _timerId: any;\r\n    private _currentTimeUnit: number;\r\n    private _player: Player;\r\n    private _obstacles: Array<Obstacle>;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        this._canvas = canvas;\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._currentTimeUnit = 0;\r\n        this._player = new Player(this._ctx, Game.PIXELS_PER_MOVE);\r\n        //TODO move the array of obstacles to a 'Level' object, or something to capture a given layout of obstacles. It could also have a bg image for each level etc.\r\n        this._obstacles = [\r\n            new WallObstacleLg(this._ctx, Game.PIXELS_PER_MOVE, 1, true),\r\n            new WallObstacleSm(this._ctx, Game.PIXELS_PER_MOVE, 20, true),\r\n            new WallObstacleSm(this._ctx, Game.PIXELS_PER_MOVE, 100, true),\r\n            new WallObstacleMd(this._ctx, Game.PIXELS_PER_MOVE, 180, true),\r\n            new WallObstacleLg(this._ctx, Game.PIXELS_PER_MOVE, 25, false),\r\n            new WallObstacleMd(this._ctx, Game.PIXELS_PER_MOVE, 50, false),\r\n            new WallObstacleSm(this._ctx, Game.PIXELS_PER_MOVE, 100, false),\r\n            new WallObstacleLg(this._ctx, Game.PIXELS_PER_MOVE, 120, false)\r\n        ];\r\n\r\n        window.addEventListener(\"keydown\", (evt) => this.handleKeyDown(evt), true);\r\n        window.addEventListener(\"keyup\", (evt) => this.handleKeyUp(evt), true);\r\n    }\r\n\r\n    protected handleKeyDown(evt): void {\r\n        if (evt.keyCode == 38) {\r\n            this._player.startJump();\r\n        }\r\n    }\r\n\r\n    protected handleKeyUp(evt): void {\r\n        if (evt.keyCode == 38) {\r\n            this._player.endJump();\r\n        }\r\n    }\r\n\r\n    protected handleTimeUnitElapse(): void {\r\n        //Clear screen.\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n\r\n        //Render player.\r\n        this._player.render();\r\n\r\n        //Render all obstacles.\r\n        for (let o of this._obstacles) {\r\n            if (o.isStarted || o.order <= this._currentTimeUnit) {\r\n                //Render obstacle.\r\n                o.moveObstacle();\r\n                o.render();\r\n\r\n                //Evaluate if player has hit an obstacle.\r\n                if (this._player.isTouchingObstacle(o)) {\r\n                    this._player.hasHitObstacle = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        //Check to see if the player hit an obstacle.\r\n        if (this._player.hasHitObstacle) {\r\n            this.stop();\r\n            alert('Game Over');\r\n        }\r\n        \r\n        //Increment current time unit.\r\n        this._currentTimeUnit++;\r\n    }\r\n\r\n    public start(): void {\r\n        //Perform initial renderings (before we start moving the screen).\r\n        this._player.render();\r\n\r\n        //Set up the timer and handler. Note I had to wrap the call to handleTimeUnitElapse in an anonymous function, otherwise references to this._blah were invalid inside that method.\r\n        this._timerId = setInterval(() => this.handleTimeUnitElapse(), Game.MILLISEC_PER_MOVE);\r\n    }\r\n\r\n    public stop(): void {\r\n        clearInterval(this._timerId);\r\n    }\r\n}\r\n\r\nabstract class RenderableItem {\r\n    protected _ctx: CanvasRenderingContext2D;\r\n    protected _x: number;\r\n    protected _y: number;\r\n    protected _w: number;\r\n    protected _h: number;\r\n    protected _pixelsPerMove: number; //The number of pixels an object should shift for a single move.\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, x: number, y: number, w: number, h: number) {\r\n        this._ctx = ctx;\r\n        this._x = x; //Left x\r\n        this._y = y; //Bottom y\r\n        this._w = w;\r\n        this._h = h;\r\n        this._pixelsPerMove = pixelsPerMove;\r\n    }\r\n\r\n    public get X_Left(): number { return this._x; }\r\n    public get X_Right(): number { return this._x + this._w; }\r\n    public get Y_Top(): number { return this._y; }\r\n    public get Y_Bottom(): number { return this._y + this._h; }\r\n    public get W(): number { return this._w; }\r\n    public get H(): number { return this._h; }\r\n\r\n    public abstract render();\r\n}\r\n\r\nclass Player extends RenderableItem {\r\n    private static PLAYER_X_COORD: number = 100;\r\n    private static PLAYER_Y_COORD_OFFSET: number = 2;\r\n    private static PLAYER_WIDTH: number = 20;\r\n    private static PLAYER_HEIGHT: number = 20;\r\n    private static PLAYER_COLOR: string = \"red\";\r\n\r\n    private _normalY: number;\r\n    private _isJumping: boolean;\r\n    private _hasHitObstacle: boolean;\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number) {\r\n        //Calculate starting X,Y coordinates. All players start visible, toward the left bottom of the screen.\r\n        let y: number = ctx.canvas.height - Player.PLAYER_HEIGHT - Player.PLAYER_Y_COORD_OFFSET;\r\n\r\n        super(ctx, pixelsPerMove, Player.PLAYER_X_COORD, y, Player.PLAYER_WIDTH, Player.PLAYER_HEIGHT);\r\n\r\n        this._normalY = y;\r\n        this._isJumping = false;\r\n    }\r\n\r\n    public get hasHitObstacle(): boolean {\r\n        return this._hasHitObstacle;\r\n    }\r\n\r\n    public set hasHitObstacle(value: boolean) {\r\n        this._hasHitObstacle = value;\r\n    }\r\n\r\n    public render(): void {\r\n        //Check for jump status.\r\n        if (this._isJumping) {\r\n            this._y -= this._pixelsPerMove;\r\n        } else {\r\n            if (this._y < this._normalY) {\r\n                this._y += this._pixelsPerMove;\r\n            }\r\n        }\r\n\r\n        this._ctx.fillStyle = Player.PLAYER_COLOR;\r\n        this._ctx.fillRect(this._x, this._y, this._w, this._h);\r\n    }\r\n\r\n    public startJump(): void {\r\n        this._isJumping = true;\r\n    }\r\n\r\n    public endJump(): void {\r\n        this._isJumping = false;\r\n    }\r\n\r\n    public isTouchingObstacle(obstacle: Obstacle): boolean {\r\n        let isTouching: boolean = false;\r\n\r\n        if (this.X_Right > obstacle.X_Left && this.X_Right < obstacle.X_Right) {\r\n            if (this.Y_Top > obstacle.Y_Top && this.Y_Top < obstacle.Y_Bottom) {\r\n                isTouching = true;\r\n            } else if (this.Y_Bottom > obstacle.Y_Top && this.Y_Bottom < obstacle.Y_Bottom) {\r\n                isTouching = true;\r\n            }\r\n        }\r\n\r\n        return isTouching;\r\n    }\r\n}\r\n\r\nabstract class Obstacle extends RenderableItem {\r\n    protected _isStarted: boolean; //Started means it has started motion from left edge, to be visible, moving toward right edge.\r\n    protected _isActive: boolean; //Active means it has not passed the left edge.\r\n    protected _order: number; //Number of time units before this obstiacle starts.\r\n    protected _isTop: boolean; //Determines if the obstacle appears on the ceiling or floor.\r\n    \r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, w: number, h: number, order: number, isTop: boolean) {\r\n        //Calculate starting X,Y coordinates. All obsticals start off the right edge.\r\n        let x: number = ctx.canvas.width + 10;\r\n        let y: number = isTop ? 0 : ctx.canvas.height - h; //Determine Y coordinate based on if it is a top or bottom obstacle.\r\n\r\n        super(ctx, pixelsPerMove, x, y, w, h);\r\n\r\n        this._order = order;\r\n        this._isStarted = false;\r\n        this._isActive = true;\r\n    }\r\n\r\n    public moveObstacle() {\r\n        this._x -= this._pixelsPerMove; //Move X coord to move obstacle from right to left.\r\n\r\n        //Check to see if the obstical is still active (i.e., still on the screen).\r\n        if (this._isActive && this._x < 0 - this._w) {\r\n            this._isActive = false;\r\n        }\r\n\r\n        //Check to see if the obstical has started (i.e., has first appeard on teh screen).\r\n        //if (!this._isStarted && this._x < this._ctx.canvas.width) {\r\n        //    this._isStarted = true;\r\n        //}\r\n        this._isStarted = true;\r\n    }\r\n\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n\r\n    public get isStarted(): boolean {\r\n        return this._isStarted;\r\n    }\r\n\r\n    public get order(): number {\r\n        return this._order;\r\n    }\r\n\r\n    public set order(value: number) {\r\n        this._order = value;\r\n    }\r\n}\r\n\r\nclass WallObstacle extends Obstacle {\r\n    private _wallColor: string;\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, wallWidth: number, wallHeight: number, wallColor: string, order: number, isTop: boolean) {\r\n        super(ctx, pixelsPerMove, wallWidth, wallHeight, order, isTop);\r\n        this._wallColor = wallColor;\r\n    }\r\n\r\n    public render() {\r\n        this._ctx.fillStyle = this._wallColor;\r\n        this._ctx.fillRect(this._x, this._y, this._w, this._h);\r\n    }\r\n}\r\n\r\nclass WallObstacleLg extends WallObstacle {\r\n    private static WALL_WIDTH: number = 50;\r\n    private static WALL_HEIGHT: number = 200;\r\n    private static WALL_COLOR: string = \"yellow\";\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, order: number, isTop: boolean) {\r\n        super(ctx, pixelsPerMove, WallObstacleLg.WALL_WIDTH, WallObstacleLg.WALL_HEIGHT, WallObstacleLg.WALL_COLOR, order, isTop);\r\n    }\r\n}\r\n\r\nclass WallObstacleMd extends WallObstacle {\r\n    private static WALL_WIDTH: number = 50;\r\n    private static WALL_HEIGHT: number = 100;\r\n    private static WALL_COLOR: string = \"blue\";\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, order: number, isTop: boolean) {\r\n        super(ctx, pixelsPerMove, WallObstacleMd.WALL_WIDTH, WallObstacleMd.WALL_HEIGHT, WallObstacleMd.WALL_COLOR, order, isTop);\r\n    }\r\n}\r\n\r\nclass WallObstacleSm extends WallObstacle {\r\n    private static WALL_WIDTH: number = 50;\r\n    private static WALL_HEIGHT: number = 50;\r\n    private static WALL_COLOR: string = \"orange\";\r\n\r\n    public constructor(ctx: CanvasRenderingContext2D, pixelsPerMove: number, order: number, isTop: boolean) {\r\n        super(ctx, pixelsPerMove, WallObstacleSm.WALL_WIDTH, WallObstacleSm.WALL_HEIGHT, WallObstacleSm.WALL_COLOR, order, isTop);\r\n    }\r\n}\r\n"]}